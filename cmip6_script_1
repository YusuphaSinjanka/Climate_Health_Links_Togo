rm(list = ls())
# CMIP6 mini-ensemble (single script) 
# Outputs:
#   outputs/maps/*          (bigger seasonal + annual mean maps; both models, one legend)
#   outputs/timeseries/*    (statewide annual cycles; regional annual cycles)


# SETTINGS that can be changed
var    <- "tasmax"   # one of: "tas", "pr", "tasmin", "tasmax"
slices <- c("baseline_1991_2020",
            "ssp245_2021_2040","ssp245_2041_2060","ssp245_2081_2100",
            "ssp585_2021_2040","ssp585_2041_2060","ssp585_2081_2100")

out_maps <- file.path("outputs","maps");           dir.create(out_maps, recursive=TRUE, showWarnings=FALSE)
out_ts   <- file.path("outputs","timeseries");     dir.create(out_ts,   recursive=TRUE, showWarnings=FALSE)

# Template grid (the same 0.25° box you used in preprocessing)
template <- terra::rast(
  extent    = terra::ext(-1, 3, 5.5, 11.5),
  resolution= 0.25,
  crs       = "EPSG:4326"
)

# PACKAGES 
pkgs <- c("terra","sf","dplyr","data.table","stringr","purrr","ggplot2","RColorBrewer","glue","patchwork")
invisible(lapply(setdiff(pkgs, rownames(installed.packages())), install.packages))
invisible(lapply(pkgs, library, character.only=TRUE))

# SHAPES (auto-downloaded) 
dir_shapes <- file.path("data","shapes"); dir.create(dir_shapes, recursive=TRUE, showWarnings=FALSE)
shp_country_path <- file.path(dir_shapes,"togo_country.gpkg")
shp_regions_path <- file.path(dir_shapes,"togo_regions.gpkg")

if (!file.exists(shp_country_path) || !file.exists(shp_regions_path)) {
  if (!requireNamespace("geodata", quietly=TRUE)) install.packages("geodata")
  tg0 <- geodata::gadm("TGO", level=0, path=tempdir()) |> sf::st_as_sf()
  tg1 <- geodata::gadm("TGO", level=1, path=tempdir()) |> sf::st_as_sf() |>
    dplyr::mutate(region = stringr::str_to_title(coalesce(.data$NAME_1, .data$NAME_0))) |>
    dplyr::mutate(region = dplyr::case_when(
      stringr::str_detect(region,"Savan") ~ "Savanes",
      stringr::str_detect(region,"Kara") ~ "Kara",
      stringr::str_detect(region,"Centr") ~ "Centrale",
      stringr::str_detect(region,"Plate") ~ "Plateaux",
      stringr::str_detect(region,"Marit") ~ "Maritime",
      TRUE ~ region))
  sf::st_write(tg0, shp_country_path, delete_dsn=TRUE, quiet=TRUE)
  sf::st_write(tg1, shp_regions_path, delete_dsn=TRUE, quiet=TRUE)
}
togo_country <- sf::st_read(shp_country_path, quiet=TRUE) |> sf::st_make_valid()
togo_regions <- sf::st_read(shp_regions_path, quiet=TRUE) |> sf::st_make_valid()
togo_state   <- sf::st_union(togo_country) # one polygon

# FILE DISCOVERY 

# My Processed NetCDF root/path (../proc/<var>/<MODEL>/final/*.nc)
proc_root <- file.path(dirname(getwd()), "proc")
discover_files <- function(v){
  list(
    MRI = list.files(file.path(proc_root, v, "MRI-ESM2-0",  "final"), pattern="\\.nc$", full.names=TRUE),
    MPI = list.files(file.path(proc_root, v, "MPI-ESM1-2-HR","final"), pattern="\\.nc$", full.names=TRUE)
  )
}
slice_from_name <- function(x){
  m <- stringr::str_match(basename(x), ".*?(baseline_1991_2020|ssp245_\\d{4}_\\d{4}|ssp585_\\d{4}_\\d{4})")
  m[,2]
}
files <- discover_files(var)

# SMALL HELPERS (Colour codes and templates)
pal_temp_seq <- function(n=9)  RColorBrewer::brewer.pal(n,"YlOrRd")
pal_pr_seq   <- function(n=9)  RColorBrewer::brewer.pal(n,"YlGnBu")
pal_div_t    <- function(n=11) rev(RColorBrewer::brewer.pal(n,"RdBu"))
pal_div_pr   <- function(n=11) RColorBrewer::brewer.pal(n,"BrBG")

to_template <- function(r, method="bilinear"){
  r2 <- terra::resample(r, template, method = method)
  terra::crop(r2, template)
}
read_slice <- function(filelist, sl, method="bilinear"){
  f <- filelist[slice_from_name(filelist) == sl]
  stopifnot(length(f)==1)
  terra::rast(f) |> to_template(method = method)
}

agg_seasonal <- function(r){
  tt <- terra::time(r); mon <- as.integer(format(tt,"%m"))
  seas <- c("DJF","MAM","JJA","SON")[((mon+9) %/% 3) %% 4 + 1]
  s <- terra::tapp(r, seas, fun="mean", na.rm=TRUE)
  annual <- terra::app(r, mean, na.rm=TRUE); names(annual) <- "Annual"
  c(s, annual)
}
agg_yearly <- function(r){ terra::tapp(r, format(terra::time(r), "%Y"), fun="mean", na.rm=TRUE) }

# area-weighted time-series over a polygon (exact=TRUE covers partial cells)
area_weight_ts <- function(r, poly_sf){
  v <- terra::vect(poly_sf)
  df <- terra::extract(r, v, fun=mean, na.rm=TRUE, exact=TRUE)
  as.numeric(df[1, -1, drop=TRUE])  # vector (time)
}

# map plotter (masked to Togo; single type of legend)
plot_map <- function(r, title="", palette="temp", units_label=""){
  r_mask <- terra::mask(r, terra::vect(togo_country), touches=TRUE)
  df <- as.data.frame(r_mask, xy=TRUE, na.rm=TRUE); names(df)[3] <- "val"
  pal <- switch(palette, temp=pal_temp_seq(9), pr=pal_pr_seq(9), divt=pal_div_t(11), divp=pal_div_pr(11), pal_temp_seq(9))
  ggplot() +
    geom_raster(data=df, aes(x,y,fill=val)) +
    scale_fill_gradientn(colours = pal, name = units_label, guide = guide_colourbar(title.position="top")) +
    geom_sf(data=togo_country, fill=NA, colour="grey10", linewidth=0.7) +
    geom_sf(data=togo_regions, fill=NA, colour="grey45", linewidth=0.35) +
    coord_sf(xlim=sf::st_bbox(togo_country)[c("xmin","xmax")],
             ylim=sf::st_bbox(togo_country)[c("ymin","ymax")], expand=FALSE) +
    labs(title=title, x=NULL, y=NULL) +
    theme_minimal(base_size=12) +
    theme(panel.grid=element_blank(), legend.position="right")
}
save_png <- function(p, path, w=10, h=12, dpi=450) ggplot2::ggsave(path, p, width=w, height=h, dpi=dpi)

# convenient month labels J–D
mon_lbl <- c("J","F","M","A","M","J","J","A","S","O","N","D")

# 1) SEASONAL & ANNUAL MEAN MAPS
message("Maps (bigger panels) → ", var)
ylab <- if (var=="pr") "mm/day" else "°C"
pal  <- if (var=="pr") "pr"    else "temp"

for (sl in slices) {
  r_mri  <- read_slice(files$MRI, sl)
  r_mpi  <- read_slice(files$MPI, sl)
  seas_mri <- agg_seasonal(r_mri)
  seas_mpi <- agg_seasonal(r_mpi)
  nm <- names(seas_mri) # DJF, MAM, JJA, SON, Annual
  
  # A 2 (models) x 5 (seasons) patchwork, single legend
  plots <- list()
  for (i in seq_along(nm)){
    pmri <- plot_map(seas_mri[[i]], title = paste0("MRI | ", nm[i]), palette = pal, units_label = ylab)
    pmpi <- plot_map(seas_mpi[[i]], title = paste0("MPI | ", nm[i]), palette = pal, units_label = ylab)
    plots[[length(plots)+1]] <- pmri + theme(legend.position="right")
    plots[[length(plots)+1]] <- pmpi + theme(legend.position="right")
  }
  # arrange: rows = seasons(5), columns = 2 models
  pw <- patchwork::wrap_plots(plots, ncol = 2, byrow = FALSE) +
    patchwork::plot_annotation(title = paste0(toupper(var), " | ", sl),
                               theme = theme(plot.title = element_text(hjust=.5, face="bold")))
  save_png(pw, file.path(out_maps, glue("{var}_{sl}_seasonal_annual_models.png")),
           w = 10, h = 16, dpi = 450)  # bigger image
}

# 2) STATEWIDE ANNUAL CYCLE: lines per slice + 5–95% CI (ensemble) 
message("Annual cycles (statewide) → ", var)

cycle_tbl <- purrr::map_dfr(slices, function(sl){
  r_mri <- read_slice(files$MRI, sl)
  r_mpi <- read_slice(files$MPI, sl)
  r_ens <- (r_mri + r_mpi) / 2
  
  v  <- area_weight_ts(r_ens, togo_state)
  tt <- terra::time(r_ens)
  dt <- data.table(val=v, ym=format(tt,"%Y-%m"))
  dt[, month := as.integer(substr(ym,6,7))]
  # stats across years for each month → 5–95% CI
  out <- dt[, .(mean = mean(val,na.rm=TRUE),
                lo   = quantile(val,0.05,na.rm=TRUE),
                hi   = quantile(val,0.95,na.rm=TRUE)), by = month]
  out$slice <- sl
  out
})

cycle_tbl$slice <- factor(cycle_tbl$slice, levels = slices)
# nice slice colours
slice_cols <- RColorBrewer::brewer.pal(7,"Set1")

p_cycle <- ggplot(cycle_tbl, aes(month, mean, colour = slice, group = slice)) +
  geom_ribbon(aes(ymin = lo, ymax = hi, fill = slice), alpha = .18, colour = NA) +
  geom_line(linewidth = 1.1) +
  scale_colour_manual(values = slice_cols, guide = guide_legend(title=NULL, nrow=2)) +
  scale_fill_manual(values = slice_cols, guide = "none") +
  scale_x_continuous(breaks = 1:12, labels = mon_lbl) +
  labs(y = if (var=="pr") "mm/day" else "°C", x = NULL,
       title = paste("Statewide Annual Cycle (Ensemble):", toupper(var))) +
  theme_minimal(base_size=12) +
  theme(panel.grid.minor = element_blank(), legend.position = "bottom")

save_png(p_cycle, file.path(out_ts, glue("{var}_annualcycle_statewide_by_slice.png")),
         w = 10, h = 6, dpi = 450)

# 3) REGIONAL ANNUAL CYCLE (one figure per slice, with 5–95% CI) 
message("Regional cycles (one image per slice) → ", var)
regions <- togo_regions |> dplyr::select(region)

reg_cols <- c(Savanes  ="#1b9e77",
              Kara     ="#d95f02",
              Centrale ="#7570b3",
              Plateaux ="#e7298a",
              Maritime ="#66a61e",
              Statewide="black")

for (sl in slices) {
  r_mri <- read_slice(files$MRI, sl)
  r_mpi <- read_slice(files$MPI, sl)
  r_ens <- (r_mri + r_mpi) / 2
  
  # helper to compute monthly stats for a polygon sf
  monthly_stats <- function(poly_sf, label){
    v  <- area_weight_ts(r_ens, poly_sf)
    tt <- terra::time(r_ens)
    dt <- data.table(val=v, ym=format(tt,"%Y-%m"))
    dt[, month := as.integer(substr(ym,6,7))]
    out <- dt[, .(mean = mean(val,na.rm=TRUE),
                  lo   = quantile(val,0.05,na.rm=TRUE),
                  hi   = quantile(val,0.95,na.rm=TRUE)), by = month]
    out$region <- label
    out
  }
  
  # regions + statewide
  tbl_list <- lapply(regions$region, function(reg){
    monthly_stats(regions[regions$region==reg,], reg)
  })
  tbl_list[[length(tbl_list)+1]] <- monthly_stats(togo_state, "Statewide")
  reg_tbl <- data.table::rbindlist(tbl_list)
  reg_tbl$region <- factor(reg_tbl$region, levels = c("Savanes","Kara","Centrale","Plateaux","Maritime","Statewide"))
  
  p_reg <- ggplot(reg_tbl, aes(month, mean, colour = region, group = region)) +
    geom_ribbon(aes(ymin = lo, ymax = hi, fill = region), alpha = .15, colour = NA) +
    geom_line(linewidth = 1.1) +
    scale_colour_manual(values = reg_cols, guide = guide_legend(title=NULL)) +
    scale_fill_manual(values = reg_cols, guide = "none") +
    scale_x_continuous(breaks = 1:12, labels = mon_lbl) +
    labs(y = if (var=="pr") "mm/day" else "°C", x = NULL,
         title = glue("Regional Annual Cycle (Ensemble, {toupper(var)}) — {sl}")) +
    theme_minimal(base_size=12) +
    theme(panel.grid.minor = element_blank(), legend.position = "right")
  
  save_png(p_reg, file.path(out_ts, glue("{var}_annualcycle_regions_{sl}.png")), w = 9.5, h = 6.5, dpi = 450)
}

message("All done. Files saved in 'outputs/'.")
